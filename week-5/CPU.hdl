// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=neg); // Negate the MSB
	Mux16(a=outMLoop, b=instruction, sel=neg, out=x1); // Mux 1, out or instruction

	Or(a=neg, b=instruction[5], out=controlA); // If address bit or MSB is asserted, then load into a
	ARegister(in=x1, load=controlA, out=outA, out[0..14]=addressM); // A register

	And(a=instruction[15], b=instruction[12], out=controlAM); // If the read bit is assesrted and MSB is aserted, read
	Mux16(a=outA, b=inM, sel=controlAM, out=x2); // mux 2, A or M
	
	ALU(x=outD, y=x2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7],no=instruction[6], out=outMLoop, out=outM, zr=zr, ng=ng);

	And(a=instruction[15], b=instruction[4], out=controlD); // Control D
	DRegister(in=outMLoop, load=controlD, out=outD); // D register 

	And(a=instruction[15], b=instruction[3], out=writeM); // Write M

	Not(in=ng, out=positive);
	Not(in=zr, out=nonzero);
	And(a=instruction[15], b=instruction[0], out=jgt); // Jump when greater then?
	And(a=positive, b=nonzero, out=posnzr); // positive and non zero
	And(a=jgt, b=posnzr, out=ld1);

	And(a=instruction[15], b=instruction[1], out=jeq); // jump equal to zero
	And(a=jeq, b=zr, out=ld2); // check if equal to zero and jump bit is asserted

	And(a=instruction[15], b=instruction[2], out=jlt); // jump smaller then
	And(a=jlt, b=ng, out=ld3); // negative number and smaller then

	Or(a=ld1, b=ld2, out=ldt);
	Or(a=ld3, b=ldt, out=ld);

	PC(in=outA, load=ld, inc=true, reset=reset, out[0..14]=pc);


}